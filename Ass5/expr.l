%{
#include "y.tab.h"    // Include the header file generated by Bison (or Yacc) for token definitions
#include <string.h>   // Include for string manipulation functions
#include <stdlib.h>   // Include for memory allocation functions

void yyerror(char * s);      // Function declaration for error handling
int yylex();        // Function declaration for the lexer
%}
%option yylineno  
%%
"set" {
    return SET;     // Return the SET token for the "set" keyword
}

[_a-zA-Z][_a-zA-Z0-9]* {
    // Token for identifiers (variable names)
    // Use strdup to duplicate the string and avoid memory leakage
    yylval.id = strdup(yytext); // Store the identifier text in yylval
    return ID;   // Return the ID token
}

[+-]?[0-9]+ {
    // Token for numeric values (integers)
    yylval.id = strdup(yytext);   // Convert the string to an integer and store it in yylval
    return NUM;   // Return the NUM token
}

"**" {
    return POW;   // Return the POW token for the power operator "**"
}

"-" {
    return SUB;   // Return the SUB token for the subtraction operator "-"
}

"+" {
    return ADD;   // Return the ADD token for the addition operator "+"
}

"*" {
    return MUL;   // Return the MUL token for the multiplication operator "*"
}

"/" {
    return DIV;   // Return the DIV token for the division operator "/"
}

"%" {
    return MOD;   // Return the MOD token for the modulo operator "%"
}

"(" {
    return LP;    // Return the LP token for the left parenthesis "("
}

")" {
    return RP;    // Return the RP token for the right parenthesis ")"
}

[ \t\n] {
    // Ignore whitespace characters (spaces, tabs, newlines)
}

. {
    // Handle unexpected tokens
    printf("Unexpected token %s\n", yytext); // Print an error message for unexpected tokens
}

%%

// Function to handle end-of-file and other end-of-input conditions
int yywrap(void)
{
    return 1; // Return 1 to indicate that there are no more tokens
}
